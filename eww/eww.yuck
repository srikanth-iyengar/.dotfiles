(defpoll memory :interval "1s"
  "scripts/mem.sh"
)

(deflisten workspace :initial "1"
  "scripts/workspace.sh"
)

(defpoll disk :interval "10s"
  "scripts/disk.sh"
)

(defpoll curr_time :interval  "60s"
  "scripts/time.sh"
)

(defpoll disk_usage_perc :interval "60s"
  "scripts/overall-disk.sh"
)

(
  defvar reveal_disks false
)

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 5
    (box :class {workspace == 1 ? "workspace active" : "workspace inactive"} "")
    (box :class {workspace == 2 ? "active workspace" : "inactive workspace"} "󰈹")
    (box :class {workspace == 3 ? "active workspace" : "inactive workspace"} 3)
    (box :class {workspace == 4 ? "active workspace" : "inactive workspace"} 4)
    (box :class {workspace == 5 ? "active workspace" : "inactive workspace"} 5)
    (box :class {workspace == 6 ? "active workspace" : "inactive workspace"} 6)
    (box :class {workspace == 7 ? "active workspace" : "inactive workspace"} 7)
    (box :class {workspace == 8 ? "active workspace" : "inactive workspace"} 8)
    (box :class {workspace == 9 ? "active workspace" : "inactive workspace"} 9)
    )
)

(defwidget time []
  (box :class "time" curr_time)
)

(defwidget cpu []
    (box :class "cpu-box"
    (circular-progress  :valign "end"
                        :halign "end"
                        :tooltip {EWW_CPU.avg}
                        :value {EWW_CPU.avg}
                        :thickness 3
                        :clockwise true
                        :class "cpu"
     (label :class "cpu-icon" :text ""))))

(defwidget ram []
    (box :class "ram-box"
    (circular-progress  :valign "end"
                        :halign "end"
                        :tooltip {EWW_RAM.used_mem_perc}
                        :value {EWW_RAM.used_mem_perc} 
                        :thickness 3
                        :clockwise true
                        :class "ram"
     (label :class "ram-icon" :text "")
    )
  )
)

(defwidget disk_mount [used avail mountpoint]
  (box :class "disk-mount" :orientation "v" :halign "start" :spacing 2
    (label :class "disk-usage"
      :text {"(" + mountpoint + ": " + used + "|" + avail + ")  "})
  )
)

; Revealer on hover, using children
(defwidget revealer-on-hover [revealvar revealvar-name ?class ?duration ?transition]
  (box
    :class "${class} revealer-on-hover"
    :orientation "h"
    :space-evenly false
    (eventbox
      :onclick "${EWW_CMD} update reveal_disks=${!reveal_disks}"
      (box
        :space-evenly false
        (children :nth 0)
        (revealer
          :reveal revealvar
          :transition {transition ?: "slideright"}
          :duration {duration ?: "500ms"}
          (children :nth 1))))))

(defwidget disks []
  (revealer-on-hover
    :revealvar reveal_disks
    :revealvar-name "reveal_disks"
    (circular-progress :valign "end"
        :halign "end"
        :value {disk_usage_perc}
        :tooltip {disk_usage_perc}
        :thickness 3
        :clockwise true
        :class "ram"
        (label :class "ram-icon" :text "󱊞")
      )
    (box 
      :space-evenly false
      (for mount in disk
        (disk_mount :used {mount.fsused}
          :avail {mount.fsavail}
          :mountpoint {mount.mountpoints[0]})
      )
    )
  )
)

(defwidget side-stuff []
  (centerbox :orientation "h" :halign "end"
    (cpu)
    (ram)
    (disks)
  )
)

(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (time)
    (side-stuff)))


(defwindow dock-bar
           :monitor 0
           :geometry (geometry :x "0%"
                               :y "0%"
                               :width "100%"
                               :height "10px"
                               :anchor "bottom center")
           :windowtype "dock"
           :exclusive true
           :wm-ignore false
  (bar)
)
