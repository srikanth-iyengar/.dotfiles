{
  "Competitive Programming snippet": {
    "prefix": "acom",
    "body": [
      "import java.util.*;",
      "import java.io.*;",
      "import java.time.*;",
      "import static java.lang.Math.*;",
      "",
      "@SuppressWarnings(\"unused\")",
      "public class $TM_FILENAME_BASE {",
      "    static boolean DEBUG = false;",
      "    static int query = 0;",
      "    static Reader fs;",
      "    static PrintWriter pw;",
      "",
      "    static void solve() {",
      "        $0",
      "    }",
      "",
      "    public static void main(String[] args) {",
      "        Instant start = Instant.now();",
      "        fs = new Reader();",
      "        pw = new PrintWriter(System.out);",
      "        int t = fs.nextInt();",
      "        while(t-- > 0)",
      "            solve();",
      "        Instant end = Instant.now();",
      "        if (DEBUG) {",
      "            pw.println(Duration.between(start, end));",
      "        }",
      "        pw.close();",
      "    }",
      "",
      "    static void sort(int a[]) {",
      "        ArrayList<Integer> l = new ArrayList<Integer>();",
      "        for (int x : a)",
      "            l.add(x);",
      "        Collections.sort(l);",
      "        for (int i = 0; i < a.length; i++) {",
      "            a[i] = l.get(i);",
      "        }",
      "    }",
      "",
      "    public static void print(long a, long b, long c, PrintWriter pw) {",
      "        pw.println(a + \" \" + b + \" \" + c);",
      "        return;",
      "    }",
      "",
      "    static class Reader {",
      "        BufferedReader br;",
      "        StringTokenizer st;",
      "",
      "        public Reader() {",
      "            br = new BufferedReader(new InputStreamReader(System.in));",
      "        }",
      "",
      "        String next() {",
      "            while (st == null || !st.hasMoreElements()) {",
      "                try {",
      "                    st = new StringTokenizer(br.readLine());",
      "                } catch (IOException e) {",
      "                    e.printStackTrace();",
      "                }",
      "            }",
      "            return st.nextToken();",
      "        }",
      "",
      "        int nextInt() {",
      "            return Integer.parseInt(next());",
      "        }",
      "",
      "        long nextLong() {",
      "            return Long.parseLong(next());",
      "        }",
      "",
      "        double nextDouble() {",
      "            return Double.parseDouble(next());",
      "        }",
      "",
      "        String nextLine() {",
      "            String str = \"\";",
      "            try {",
      "                str = br.readLine();",
      "            } catch (IOException e) {",
      "                e.printStackTrace();",
      "            }",
      "            return str;",
      "        }",
      "",
      "        int[] readArray(int n) {",
      "            int a[] = new int[n];",
      "            for (int i = 0; i < n; i++)",
      "                a[i] = nextInt();",
      "            return a;",
      "        }",
      "",
      "        int[][] read2Array(int n, int m) {",
      "            int a[][] = new int[n][m];",
      "            for (int i = 0; i < n; i++) {",
      "                for (int j = 0; j < m; j++) {",
      "                    a[i][j] = nextInt();",
      "                }",
      "            }",
      "            return a;",
      "        }",
      "    }",
      "}"
    ],
    "description": "Competitive Programming snippet"
  },
  "Dijiktras Snippet": {
    "prefix": "Dijiktras",
    "body": [
      "$0",
      "    private int[] dijiktras(ArrayList<Edge> adj[], int i, int n) {",
      "        int distance[] = new int[n];",
      "        Arrays.fill(distance, Integer.MAX_VALUE);",
      "        PriorityQueue<Edge> pq = new PriorityQueue<>();",
      "        distance[i] = 0;",
      "        pq.add(new Edge(-1, i, 0));",
      "        boolean vis[] = new boolean[n];",
      "        while(!pq.isEmpty()) {",
      "            Edge e = pq.poll();",
      "            vis[e.to] = true;",
      "            for(Edge p : adj[e.to]) {",
      "                if(distance[p.to] > e.distance + p.distance) {",
      "                    distance[p.to] = e.distance + p.distance;",
      "                }",
      "                if(!vis[p.to]) {",
      "                    pq.add(new Edge(e.to, p.to, distance[p.to]));",
      "                }",
      "            }",
      "        }",
      "        return distance;",
      "    }",
      "",
      "    class Edge implements Comparable<Edge>{",
      "        int from , to;",
      "        int distance;",
      "        Edge(int from, int to, int distance) {",
      "            this.from=from;",
      "            this.to=to;",
      "            this.distance=distance;",
      "        }",
      "        public int compareTo(Edge e) {",
      "            return Integer.compare(e.distance, distance);",
      "        }",
      "    }"
    ],
    "description": "Dijiktras algorithm snippet"
  },
  "Sieve Snippet": {
    "prefix": "sieve",
    "body": [
      "      private ArrayList<Integer> sieve(int n) {",
      "        boolean vis[] = new boolean[n+1];",
      "        for(int i = 2 ; i <= n ; i++) {",
      "          if(!vis[i]) {",
      "            for(int j = i*i ; j <= n ; j += i) {",
      "              vis[j] = true;",
      "            }",
      "          }",
      "        }",
      "        ArrayList<Integer> primes = new ArrayList<>();",
      "        for(int i = 2 ; i <= n ; i++) {",
      "          if(!vis[i])",
      "          primes.add(i);",
      "        }",
      "        return primes;",
      "      }"
    ]
  },
  "Smallest Prime Factor computation": {
    "prefix": "spf",
    "body": [
      "    private int [] spf(int n) {",
      "        int spf[] = new int[n+1];",
      "        spf[1] = 1;",
      "        for(int i = 2 ; i  <= n; i++) {",
      "            spf[i] = i;",
      "        }",
      "        for(int i = 4 ; i <= n ; i += 2) {",
      "            spf[i] = 2;",
      "        }",
      "        for(int i = 3 ; i * i <= n ; i++) {",
      "            if(spf[i] == i) {",
      "                for(int j = i * i ; j <= n; j += i){",
      "                    if(spf[j] == j) {",
      "                        spf[j] = i;",
      "                    }",
      "                }",
      "            }",
      "        }",
      "        return spf;",
      "    }"
    ]
  }
}
